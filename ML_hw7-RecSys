from surprise import Dataset
from surprise import Reader
import pandas as pd
import os

#load the data
file_path = os.path.expanduser('D:/Analytics/UCF/Machine Learning/Assignments/restaurant_ratings.txt')
reader = Reader(line_format='user item rating timestamp', sep='\t')
data = Dataset.load_from_file(file_path, reader=reader)

#Q5
from surprise import SVD
from surprise.model_selection import cross_validate

algorithm = SVD()
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q6
algorithm = SVD(biased=False)
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q7
from surprise import NMF
algorithm = NMF()
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q8
from surprise import KNNBasic

algorithm = KNNBasic(sim_options = {
'user_based': True
})
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q9
algorithm = KNNBasic(sim_options = {
'user_based': False
})
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q14.a.1
algorithm = KNNBasic(sim_options = {
'name':'MSD',
'user_based': True
})
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q14.a.2
algorithm = KNNBasic(sim_options = {
'name':'cosine',
'user_based': True
})
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q14.a.3
algorithm = KNNBasic(sim_options = {
'name':'pearson',
'user_based': True
})
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q14.b.1
algorithm = KNNBasic(sim_options = {
'name':'MSD',
'user_based': False
})
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q14.b.2
algorithm = KNNBasic(sim_options = {
'name':'cosine',
'user_based': False
})
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q14.b.3
algorithm = KNNBasic(sim_options = {
'name':'pearson',
'user_based': False
})
performance = cross_validate(algorithm, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)
print("Performance:",performance)

#Q15.a
import matplotlib.pyplot as pic

measure = []
method =''
k_val=(5,10,15,20,25)
for kvalue in k_val:
    for algorithm in [(KNNBasic(k_val=kvalue, sim_options = {'method':'MSD', 'user_based': True }))]:
        performance = cross_validate(algorithm, data, measures=['RMSE'], cv=3, verbose=False)
        data_temp = pd.DataFrame.from_dict(performance).mean(axis=0)
        data_temp = data_temp.append(pd.Series([str(algorithm).split(' ')[0].split('.')[-1]], index=['Algorithm']))
        measure.append(data_temp)
UserBased_Dataset=pd.DataFrame(measure).set_index('Algorithm').sort_values('test_rmse')
print(UserBased_Dataset)
pic.bar(k_val,UserBased_Dataset.test_rmse,color='blue',align='center', alpha=0.5)
pic.show()

#Q15.b
measure = []
for kvalue in k_val:
    for algorithm in [(KNNBasic(k_val=kvalue, sim_options = {'name':'MSD', 'user_based': False }))]:
        performance = cross_validate(algorithm, data, measures=['RMSE'], cv=3, verbose=False)
        data_temp = pd.DataFrame.from_dict(performance).mean(axis=0)
        data_temp = data_temp.append(pd.Series([str(algorithm).split(' ')[0].split('.')[-1]], index=['Algorithm']))
        measure.append(data_temp)
ItemBased_Dataset=pd.DataFrame(measure).set_index('Algorithm').sort_values('test_rmse')
print(ItemBased_Dataset)
pic.bar(k_val,ItemBased_Dataset.test_rmse,color='green',align='center', alpha=0.5)
pic.show()
